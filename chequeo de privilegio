using System;
using System.IO;
using System.Threading;
using System.Collections.Generic;
using System.Security.Principal;
using System.Security.Permissions;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BigFiles
{
    class FileSizes
    {
        public long size;
        public string path;

        public FileSizes(long size, string path)
        {
            this.size = size;
            this.path = path;
        }
    }



    static class Program
    {
        public static void DemonstrateWindowsBuiltInRoleEnum()
        {
            AppDomain myDomain = Thread.GetDomain();

            myDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal);
            WindowsPrincipal myPrincipal = (WindowsPrincipal)Thread.CurrentPrincipal;
            Console.WriteLine("{0} belongs to: ", myPrincipal.Identity.Name.ToString());
            Array wbirFields = Enum.GetValues(typeof(WindowsBuiltInRole));
            foreach (object roleName in wbirFields)
            {
                try
                {
                    // Cast the role name to a RID represented by the WindowsBuildInRole value.
                    Console.WriteLine("{0}? {1}.", roleName,
                        myPrincipal.IsInRole((WindowsBuiltInRole)roleName));
                    Console.WriteLine("The RID for this role is: " + ((int)roleName).ToString());

                }
                catch (Exception)
                {
                    Console.WriteLine("{0}: Could not obtain role for this RID.",
                        roleName);
                }
            }
            // Get the role using the string value of the role.
            Console.WriteLine("{0}? {1}.", "Administrators",
                myPrincipal.IsInRole("BUILTIN\\" + "Administrators"));
            Console.WriteLine("{0}? {1}.", "Users",
                myPrincipal.IsInRole("BUILTIN\\" + "Users"));
            // Get the role using the WindowsBuiltInRole enumeration value.
            Console.WriteLine("{0}? {1}.", WindowsBuiltInRole.Administrator,
               myPrincipal.IsInRole(WindowsBuiltInRole.Administrator));
            // Get the role using the WellKnownSidType.
            SecurityIdentifier sid = new SecurityIdentifier(WellKnownSidType.BuiltinAdministratorsSid, null);
            Console.WriteLine("WellKnownSidType BuiltinAdministratorsSid  {0}? {1}.", sid.Value, myPrincipal.IsInRole(sid));
        }

        static void Main(string[] args)
        {
            ManagersOnly();
            /*
            DemonstrateWindowsBuiltInRoleEnum();
            Console.ReadKey();

            System.AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal);

            WindowsIdentity curIdentity = WindowsIdentity.GetCurrent();
            WindowsPrincipal myPrincipal = new WindowsPrincipal(curIdentity);

            List<string> groups = new List<string>();

            foreach (IdentityReference irc in curIdentity.Groups)
            {
                groups.Add(((NTAccount)irc.Translate(typeof(NTAccount))).Value);
            }

            Console.WriteLine(
         @"Name:           {0},
 System:           {1}
 Authenticated:  {2}
 BuiltinAdmin:   {3}
 Identity:       {4}
 Groups:         {5}"
        ,
                 curIdentity.Name,
                 curIdentity.IsSystem,
                 curIdentity.IsAuthenticated,
                 myPrincipal.IsInRole(WindowsBuiltInRole.Administrator) ? "True" : "False",
                 myPrincipal.Identity,
                 string.Join(string.Format(",{0}\t\t", Environment.NewLine), groups.ToArray()));


            try
            {
                Console.WriteLine(Environment.NewLine);
                Console.WriteLine("--------------------------------------------------");
                AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal);
                PrincipalPermission principalPerm = new PrincipalPermission(null, "Administrators");
                Console.WriteLine("++++++++++++++++");
                principalPerm.Demand();
                Console.WriteLine("%%%%%%%%%%%%%%%%");
                Console.WriteLine("Demand succeeded.");
                Console.WriteLine("--------------------------------------------------");
                ManagersOnly();
            }
            catch (System.Security.SecurityException scx)
            {
                Console.WriteLine(scx.Message + " " + scx.FirstPermissionThatFailed.ToString());
            }
            Console.WriteLine(Environment.NewLine);
            */
            Console.ReadKey();
        }

        //[PrincipalPermissionAttribute(SecurityAction.Demand, Role = @"Administrators")]
        private static void ManagersOnly()
        {
            List<string> AllFiles = new List<string>();
            List<FileSizes> SizeList = new List<FileSizes>();

            
            void ParsePath(string path, List<string> FileList)
            {
                string[] SubDirs = Directory.GetDirectories(path);
                FileList.AddRange(SubDirs);
                FileList.AddRange(Directory.GetFiles(path));
                foreach (string subdir in SubDirs)
                    ParsePath(subdir, FileList);
            }
            ParsePath(@"D:\Banxico", AllFiles); // C:\Users\raymu\AppData
            FileInfo info;
            foreach (string entry in AllFiles)
            {
                info = new FileInfo(entry);
                if ((info.Attributes & FileAttributes.Directory) == FileAttributes.Directory)
                {
                    //Console.WriteLine("Directorio - " + entry);
                }
                else
                {
                    long size = info.Length / (1024 * 1024);
                    SizeList.Add(new FileSizes(size, entry));
                }
            }
            SizeList.Sort((y, x) => x.size.CompareTo(y.size));
            foreach(FileSizes item in SizeList)
            {
                if (item.size > 512 * 1024 * 1024)
                Console.WriteLine(item.size.ToString() + " - " + item.path);
            }
            Console.WriteLine("FIN");
            Console.ReadKey();
        }
    }
}
